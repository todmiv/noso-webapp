#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Yandex Foundation Models
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã RAG –≤ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ
 */

const fs = require('fs')
const path = require('path')
const https = require('https')
const pdfParse = require('pdf-parse')
const dotenv = require('dotenv')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Yandex Foundation Models
const YANDEX_API_KEY = process.env.YANDEX_API_KEY
const YANDEX_FOLDER_ID = process.env.YANDEX_FOLDER_ID
const DOCUMENTS_DIR = path.join(__dirname, '..', 'public', 'documents')
const DATA_DIR = path.join(__dirname, '..', 'public', 'data')
const DOCUMENTS_JSON = path.join(DATA_DIR, 'documents.json')
const EMBEDDINGS_JSON = path.join(DATA_DIR, 'embeddings.json')
const LOG_FILE = path.join(DATA_DIR, 'embeddings.log')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
function logToFile(message, level = 'INFO') {
  const timestamp = new Date().toISOString()
  const logEntry = `[${timestamp}] ${level}: ${message}\n`

  try {
    fs.appendFileSync(LOG_FILE, logEntry)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª:', error.message)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞
function clearLogFile() {
  try {
    if (fs.existsSync(LOG_FILE)) {
      fs.unlinkSync(LOG_FILE)
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞:', error.message)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Yandex API
async function checkAPIConnectivity() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex API...')

  return new Promise((resolve) => {
    const options = {
      hostname: 'llm.api.cloud.yandex.net',
      port: 443,
      path: '/',
      method: 'HEAD',
      headers: {
        'User-Agent': 'NodeJS-Embedding-Script/1.0'
      }
    }

    const req = https.request(options, (res) => {
      console.log(`üåê –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: HTTP ${res.statusCode}`)

      if (res.statusCode >= 200 && res.statusCode < 400) {
        console.log('‚úÖ Yandex API –¥–æ—Å—Ç—É–ø–µ–Ω')
        resolve(true)
      } else if (res.statusCode === 404) {
        console.log('‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–π–¥–µ–Ω')
        resolve(true)
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`)
        resolve(false)
      }
    })

    req.on('error', (error) => {
      if (error.code === 'ENOTFOUND') {
        console.log('‚ùå DNS –æ—à–∏–±–∫–∞: –¥–æ–º–µ–Ω foundation-models.api.cloud.yandex.net –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ DNS –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π hostname')
      } else if (error.code === 'ECONNREFUSED') {
        console.log('‚ùå –û—Ç–∫–∞–∑ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: –≤–æ–∑–º–æ–∂–Ω–æ, –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ firewall')
      } else if (error.code === 'ETIMEDOUT') {
        console.log('‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      } else {
        console.log(`‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.code} - ${error.message}`)
      }
      resolve(false)
    })

    req.setTimeout(10000, () => {
      console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex API (10 —Å–µ–∫)')
      req.destroy()
      resolve(false)
    })

    req.end()
  })
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if (!YANDEX_API_KEY) {
  console.error('–û—à–∏–±–∫–∞: YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  console.error('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: $env:YANDEX_API_KEY="–≤–∞—à_–∫–ª—é—á_—è–Ω–¥–µ–∫—Å–∞"')
  process.exit(1)
}

if (!YANDEX_FOLDER_ID) {
  console.error('–û—à–∏–±–∫–∞: YANDEX_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  console.error('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: $env:YANDEX_FOLDER_ID="–≤–∞—à_folder_id"')
  process.exit(1)
}

if (!fs.existsSync(DOCUMENTS_DIR)) {
  console.error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${DOCUMENTS_DIR}`)
  process.exit(1)
}

if (!fs.existsSync(DOCUMENTS_JSON)) {
  console.error(`–§–∞–π–ª documents.json –Ω–µ –Ω–∞–π–¥–µ–Ω: ${DOCUMENTS_JSON}`)
  process.exit(1)
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
let documents
try {
  documents = JSON.parse(fs.readFileSync(DOCUMENTS_JSON, 'utf8'))
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è documents.json:', error.message)
  process.exit(1)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è PDF –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
async function extractTextFromPDF(filePath) {
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
    const dataBuffer = fs.readFileSync(filePath)
    logToFile(`–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${filePath} (${dataBuffer.length} –±–∞–π—Ç)`)

    // –ü–∞—Ä—Å–∏–º PDF –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    const data = await pdfParse(dataBuffer)
    logToFile(`PDF —Ä–∞–∑–æ–±—Ä–∞–Ω: ${data.numpages} —Å—Ç—Ä–∞–Ω–∏—Ü, ${data.text.length} —Å–∏–º–≤–æ–ª–æ–≤`)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    return data.text || `–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${path.basename(filePath)}`
  } catch (error) {
    logToFile(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF ${path.basename(filePath)}: ${error.message}`, 'ERROR')
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return `–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${path.basename(filePath)}. –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.`
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ chunks (–∫–∞–∫ LangChain RecursiveCharacterTextSplitter)
function splitTextRecursively(text, chunkSize = 600, chunkOverlap = 100) {
  const separators = ["\n\n", "\n", ". ", "! ", "? ", " ", ""]

  function mergeSplits(text, separator) {
    const splits = text.split(separator).filter(split => split.length > 0)
    let goodSplits = []
    let current = ""

    for (const split of splits) {
      if (current.length + split.length > chunkSize) {
        if (current.length > 0) {
          goodSplits.push(current)
          current = split
        } else {
          goodSplits.push(split)
          current = ""
        }
      } else {
        current = current ? current + separator + split : split
      }
    }

    if (current.length > 0) {
      goodSplits.push(current)
    }

    return goodSplits
  }

  function splitText(text, separators, chunkSize, chunkOverlap) {
    const finalChunks = []
    let goodSplits = [text]

    for (let i = 0; i < separators.length; i++) {
      const separator = separators[i]
      const newSplits = []

      for (const split of goodSplits) {
        if (split.length > chunkSize) {
          newSplits.push(...mergeSplits(split, separator))
        } else {
          newSplits.push(split)
        }
      }

      goodSplits = newSplits
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
    for (let i = 0; i < goodSplits.length; i++) {
      const chunk = goodSplits[i]
      if (i > 0) {
        const prevChunk = goodSplits[i - 1]
        const overlapSize = Math.min(chunkOverlap, prevChunk.length)
        const overlapText = prevChunk.slice(-overlapSize)
        goodSplits[i] = overlapText + chunk
      }
      finalChunks.push(chunk)
    }

    return finalChunks.filter(chunk => chunk.length > 0)
  }

  return splitText(text, separators, chunkSize, chunkOverlap)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
function averageEmbeddings(embeddings) {
  if (embeddings.length === 0) return []
  if (embeddings.length === 1) return embeddings[0]

  const vectorLength = embeddings[0].length
  const averaged = new Array(vectorLength).fill(0)

  for (let i = 0; i < vectorLength; i++) {
    let sum = 0
    for (const embedding of embeddings) {
      sum += embedding[i] || 0
    }
    averaged[i] = sum / embeddings.length
  }

  return averaged
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ Yandex Foundation Models
async function generateEmbedding(text) {
  logToFile(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥: ${text.substring(0, 100)}...`);

  try {
    const options = {
      hostname: 'llm.api.cloud.yandex.net',
      port: 443,
      path: '/foundationModels/v1/textEmbedding',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${YANDEX_API_KEY}`,
        'x-folder-id': YANDEX_FOLDER_ID,
      },
    };

    const payload = {
      modelUri: `emb://${YANDEX_FOLDER_ID}/text-search-doc/latest`,
      text: text,
    };

    return new Promise((resolve, reject) => {
      const req = https.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
          try {
            logToFile(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: ${res.statusCode}`);
            const response = JSON.parse(data);
            if (response.embedding) {
              logToFile(`–≠–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${response.embedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π`);
              resolve(response.embedding);
            } else {
              logToFile(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API: ${data.substring(0, 200)}...`, 'ERROR');
              reject(new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ${data}`));
            }
          } catch (error) {
            logToFile(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`, 'ERROR');
            reject(error);
          }
        });
      });

      req.on('error', (error) => {
        logToFile(`–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'ERROR');
        reject(new Error(`Request error: ${error.message}`));
      });

      req.setTimeout(30000, () => {
        logToFile('–¢–∞–π–º–∞—É—Ç API –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)', 'ERROR');
        req.destroy();
        reject(new Error('Request timeout'));
      });

      req.write(JSON.stringify(payload));
      req.end()
    });
  } catch (error) {
    logToFile(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generateEmbedding: ${error.message}`, 'ERROR');
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  clearLogFile()

  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...')
  logToFile('–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex API
  const isAPIAvailable = await checkAPIConnectivity()
  if (!isAPIAvailable) {
    console.log('‚ùå Yandex API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
    logToFile('Yandex API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã', 'ERROR')
    process.exit(1)
  } else {
    console.log('üéâ API –¥–æ—Å—Ç—É–ø–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')
    logToFile('Yandex API –¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É')
  }

  const embeddings = {}
  let processedCount = 0
  let errorCount = 0

  for (const doc of documents) {
    console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${doc.filename}`)
    logToFile(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${doc.filename}`)

    const filePath = path.join(DOCUMENTS_DIR, doc.filename)
    if (!fs.existsSync(filePath)) {
      console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${doc.filename}`)
      logToFile(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${doc.filename}`, 'WARN')
      continue
    }

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
      logToFile(`–ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è PDF: ${doc.filename}`)
      const fullText = await extractTextFromPDF(filePath)
      logToFile(`–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π: ${fullText.length} —Å–∏–º–≤–æ–ª–æ–≤`)

      // –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ chunks (RecursiveCharacterTextSplitter: size=600, overlap=100)
      const textChunks = splitTextRecursively(fullText, 600, 100)
      logToFile(`–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${textChunks.length} chunks (size=600, overlap=100)`)

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
      const chunkData = []
      for (let i = 0; i < textChunks.length; i++) {
        const chunk = textChunks[i]
        logToFile(`–û–±—Ä–∞–±–æ—Ç–∫–∞ chunk ${i + 1}/${textChunks.length}: ${chunk.length} —Å–∏–º–≤–æ–ª–æ–≤`)

        const embedding = await generateEmbedding(chunk)
        chunkData.push({
          text: chunk,
          embedding: embedding
        })
        logToFile(`–ü–æ–ª—É—á–µ–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è chunk ${i + 1}, —Ä–∞–∑–º–µ—Ä: ${embedding.length}`)

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < textChunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000))
        }
      }

      embeddings[doc.id] = {
        filename: doc.filename,
        title: doc.title,
        chunks: chunkData,
        processed_at: new Date().toISOString()
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      if (!fs.existsSync(DATA_DIR)) {
        fs.mkdirSync(DATA_DIR, { recursive: true })
        logToFile('–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö')
      }

      fs.writeFileSync(EMBEDDINGS_JSON, JSON.stringify(embeddings, null, 2))
      logToFile(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${EMBEDDINGS_JSON}`)

      processedCount++
      logToFile(`–î–æ–∫—É–º–µ–Ω—Ç ${doc.title} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —á–∞–Ω–∫–æ–≤: ${chunkData.length}`, 'SUCCESS')
    } catch (error) {
      errorCount++
      logToFile(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${doc.filename}: ${error.message}`, 'ERROR')
    }
  }

  logToFile(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount}, –æ—à–∏–±–æ–∫ ${errorCount}`)

  if (processedCount === 0) {
    console.log('‚ùå –ù–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.')
  } else if (errorCount === 0) {
    console.log('üéâ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
  } else {
    console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ—à–∏–±–æ–∫: ${errorCount}`)
  }

  console.log('üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ embeddings.log')
  logToFile('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'SUCCESS')

  return { processedCount, errorCount }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main()
    .then(({ processedCount, errorCount }) => {
      if (processedCount === 0) {
        console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')
        process.exit(1)
      } else {
        console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
      }
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message)
      process.exit(1)
    })
}

module.exports = { main }
