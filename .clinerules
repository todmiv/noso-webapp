# Cline Project-Wide Rules
# Когда получено задание «пофиксить баг» или «добавить фичу»:
# 1) Всегда начинай с Plan-режима: собери контекст ВСЕГО проекта.
# 2) Не исправляй симптом — найди и опиши корень (root cause).
# 3) После изменений запускай полный набор тестов и линтеров (см. команды ниже).
# 4) Не трогай файлы в папках: legacy/, third_party/, .git/, node_modules/, dist/, .env*.

# --- Глобальное сканирование ---
- При старте задачи прочитай: README.md, package.json/pyproject.toml/Cargo.toml/go.mod, docker-compose.yml, .github/workflows/*.yml
- Просмотри структуру каталогов: src/, lib/, app/, tests/, docs/
- Если проект содержит миграции (migrations/, alembic/, prisma/migrations/), прочитай последние 3 файла
- Если есть конфиг-файлы (*.config.js, *.yaml, *.toml, *.ini), включи их в контекст

# --- Поиск логики ---
- Используй ripgrep (rg) для поиска упоминания ошибочного символа/роута/метода по всему репо
- Для багов с трассировкой: найди файл и строку из стека, затем проследи вызовы вверх по стеку (who calls whom)
- Перед изменением нарисуй краткую схему: «A вызывает B, B вызывает C, ошибка в C потому что …»

# --- Языковые/фреймворковые правила ---
- Python: PEP 561 typing обязателен; после изменений `ruff check . && ruff format . && pytest`
- JavaScript/TypeScript: используй строгий режим (`'use strict'` / `"strict": true`), после `npm run lint && npm run test:ci`
- Go: `gofmt -w . && go vet ./... && go test ./...`
- Rust: `cargo fmt && cargo clippy -- -D warnings && cargo test`
- Docker: если менялся Dockerfile, пересобери образ и прогони контейнерные тесты

# --- Тесты ---
- Всегда запускай тесты, покрывающие изменённый модуль
- Если покрытия нет — напиши минимальный юнит-тест, воспроизводящий баг, прежде чем чинить
- Для критичных фиксов добавь регрессионный тест в `tests/regression/`

# --- Git / CI ---
- Создавай ветку `cline/fix-<краткое-описание>`
- Коммит-мессендж: `fix: <что> (причина)`; если закрывает issue, добавь `Closes #123`
- Убедись, что CI-пайплайн зелёный перед завершением задачи

# --- Безопасность ---
- Не коммить секреты, пароли, токены
- Не добавляй `console.log`/`print` с敏感-данными
- Проверь, что `.env.example` актуален

# --- Формат отчёта ---
После завершения задачи напиши краткий отчёт:
1. Root cause
2. Какие файлы изменены и почему
3. Команды, которыми проверял
4. Результат прогона тестов / CI

# --- Команды быстрого сканирования (примеры) ---
# Bash-алиасы, которые Cline может сам подставить:
alias scan="find . -type f -name '*.py' -o -name '*.ts' -o -name '*.js' -o -name '*.go' -o -name '*.rs' | grep -v node_modules | grep -v .git"
alias rgfoo="rg --hidden --follow -n"

# --- Памятка по токенам ---
- Если контекст >100 k токенов, включи middle-out или сжатие
- Для огромных кодобаз (>3 000 файлов) просматривай поэтапно: сначала README+конфиги, затем затронутые пакеты, затем соседние модули